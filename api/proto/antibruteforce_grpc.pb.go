// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: api/proto/antibruteforce.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AntiBruteforceClient is the client API for AntiBruteforce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteforceClient interface {
	// CheckAuth verifies an authentication attempt
	CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error)
	// ResetBucket resets the bucket by login and IP
	ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// AddToBlacklist adds a subnet to the blacklist
	AddToBlacklist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// RemoveFromBlacklist removes a subnet from the blacklist
	RemoveFromBlacklist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// AddToWhitelist adds a subnet to the whitelist
	AddToWhitelist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// RemoveFromWhitelist removes a subnet from the whitelist
	RemoveFromWhitelist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// GetBlacklist retrieves all subnets from the blacklist
	GetBlacklist(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IPSubnetListResponse, error)
	// GetWhitelist retrieves all subnets from the whitelist
	GetWhitelist(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IPSubnetListResponse, error)
}

type antiBruteforceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteforceClient(cc grpc.ClientConnInterface) AntiBruteforceClient {
	return &antiBruteforceClient{cc}
}

func (c *antiBruteforceClient) CheckAuth(ctx context.Context, in *CheckAuthRequest, opts ...grpc.CallOption) (*CheckAuthResponse, error) {
	out := new(CheckAuthResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/CheckAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) ResetBucket(ctx context.Context, in *ResetBucketRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/ResetBucket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToBlacklist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/AddToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) RemoveFromBlacklist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/RemoveFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) AddToWhitelist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/AddToWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) RemoveFromWhitelist(ctx context.Context, in *IPSubnetRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/RemoveFromWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) GetBlacklist(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IPSubnetListResponse, error) {
	out := new(IPSubnetListResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/GetBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteforceClient) GetWhitelist(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IPSubnetListResponse, error) {
	out := new(IPSubnetListResponse)
	err := c.cc.Invoke(ctx, "/antibruteforce.AntiBruteforce/GetWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteforceServer is the server API for AntiBruteforce service.
// All implementations must embed UnimplementedAntiBruteforceServer
// for forward compatibility
type AntiBruteforceServer interface {
	// CheckAuth verifies an authentication attempt
	CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error)
	// ResetBucket resets the bucket by login and IP
	ResetBucket(context.Context, *ResetBucketRequest) (*EmptyResponse, error)
	// AddToBlacklist adds a subnet to the blacklist
	AddToBlacklist(context.Context, *IPSubnetRequest) (*EmptyResponse, error)
	// RemoveFromBlacklist removes a subnet from the blacklist
	RemoveFromBlacklist(context.Context, *IPSubnetRequest) (*EmptyResponse, error)
	// AddToWhitelist adds a subnet to the whitelist
	AddToWhitelist(context.Context, *IPSubnetRequest) (*EmptyResponse, error)
	// RemoveFromWhitelist removes a subnet from the whitelist
	RemoveFromWhitelist(context.Context, *IPSubnetRequest) (*EmptyResponse, error)
	// GetBlacklist retrieves all subnets from the blacklist
	GetBlacklist(context.Context, *EmptyRequest) (*IPSubnetListResponse, error)
	// GetWhitelist retrieves all subnets from the whitelist
	GetWhitelist(context.Context, *EmptyRequest) (*IPSubnetListResponse, error)
	mustEmbedUnimplementedAntiBruteforceServer()
}

// UnimplementedAntiBruteforceServer must be embedded to have forward compatible implementations.
type UnimplementedAntiBruteforceServer struct {
}

func (UnimplementedAntiBruteforceServer) CheckAuth(context.Context, *CheckAuthRequest) (*CheckAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedAntiBruteforceServer) ResetBucket(context.Context, *ResetBucketRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetBucket not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToBlacklist(context.Context, *IPSubnetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlacklist not implemented")
}
func (UnimplementedAntiBruteforceServer) RemoveFromBlacklist(context.Context, *IPSubnetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlacklist not implemented")
}
func (UnimplementedAntiBruteforceServer) AddToWhitelist(context.Context, *IPSubnetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhitelist not implemented")
}
func (UnimplementedAntiBruteforceServer) RemoveFromWhitelist(context.Context, *IPSubnetRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhitelist not implemented")
}
func (UnimplementedAntiBruteforceServer) GetBlacklist(context.Context, *EmptyRequest) (*IPSubnetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklist not implemented")
}
func (UnimplementedAntiBruteforceServer) GetWhitelist(context.Context, *EmptyRequest) (*IPSubnetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhitelist not implemented")
}
func (UnimplementedAntiBruteforceServer) mustEmbedUnimplementedAntiBruteforceServer() {}

// UnsafeAntiBruteforceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteforceServer will
// result in compilation errors.
type UnsafeAntiBruteforceServer interface {
	mustEmbedUnimplementedAntiBruteforceServer()
}

func RegisterAntiBruteforceServer(s grpc.ServiceRegistrar, srv AntiBruteforceServer) {
	s.RegisterService(&AntiBruteforce_ServiceDesc, srv)
}

func _AntiBruteforce_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/CheckAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).CheckAuth(ctx, req.(*CheckAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_ResetBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).ResetBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/ResetBucket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).ResetBucket(ctx, req.(*ResetBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/AddToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToBlacklist(ctx, req.(*IPSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_RemoveFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).RemoveFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/RemoveFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).RemoveFromBlacklist(ctx, req.(*IPSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_AddToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).AddToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/AddToWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).AddToWhitelist(ctx, req.(*IPSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_RemoveFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IPSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).RemoveFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/RemoveFromWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).RemoveFromWhitelist(ctx, req.(*IPSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).GetBlacklist(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteforce_GetWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteforceServer).GetWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/antibruteforce.AntiBruteforce/GetWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteforceServer).GetWhitelist(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteforce_ServiceDesc is the grpc.ServiceDesc for AntiBruteforce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteforce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antibruteforce.AntiBruteforce",
	HandlerType: (*AntiBruteforceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAuth",
			Handler:    _AntiBruteforce_CheckAuth_Handler,
		},
		{
			MethodName: "ResetBucket",
			Handler:    _AntiBruteforce_ResetBucket_Handler,
		},
		{
			MethodName: "AddToBlacklist",
			Handler:    _AntiBruteforce_AddToBlacklist_Handler,
		},
		{
			MethodName: "RemoveFromBlacklist",
			Handler:    _AntiBruteforce_RemoveFromBlacklist_Handler,
		},
		{
			MethodName: "AddToWhitelist",
			Handler:    _AntiBruteforce_AddToWhitelist_Handler,
		},
		{
			MethodName: "RemoveFromWhitelist",
			Handler:    _AntiBruteforce_RemoveFromWhitelist_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _AntiBruteforce_GetBlacklist_Handler,
		},
		{
			MethodName: "GetWhitelist",
			Handler:    _AntiBruteforce_GetWhitelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/antibruteforce.proto",
}
